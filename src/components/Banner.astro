---
import Html from "../assets/svg/FRONTEND/Html.svg";
import Css from "../assets/svg/FRONTEND/Css.svg";
import Javascript from "../assets/svg/FRONTEND/Javascript.svg";
import React from "../assets/svg/FRONTEND/React.svg";
import Next from "../assets/svg/FRONTEND/Nextjs.svg";
import Typescript from "../assets/svg/FRONTEND/Typescript.svg";
import Node from "../assets/svg/BACKEND/Nodejs.svg";
import Nest from "../assets/svg/BACKEND/Nestjs.svg";
---

<div class="wrapper bg-[var(--primary-bg)] mt-8">
  <Html class="item item1" />
  <Css class="item item2" />
  <Javascript class="item item3" />
  <React class="item item4" />
  <Next class="item item5" />
  <Typescript class="item item6" />
  <Node class="item item7" />
  <Nest class="item item8" />
</div>

<style>
  .wrapper {
    margin-inline: auto;
    position: relative;
    width: 80%;
    max-width: 2000px;
    height: 100px;
    overflow: hidden;
    mask-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0),
      rgba(0, 0, 0, 1) 20%,
      rgba(0, 0, 0, 1) 80%,
      rgba(0, 0, 0, 0)
    );
  }

  @keyframes scrollLeft {
    to {
      left: -200px;
    }
  }

  .item {
    width: 200px;
    height: 100px;
    border-radius: 6px;
    position: absolute;
    left: max(calc(200px * 8), 100%);
    animation-name: scrollLeft;
    animation-duration: 30s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
  }

  .item1 {
    animation-delay: calc(30s / 8 * (8 - 1) * -1);
  }
  .item2 {
    animation-delay: calc(30s / 8 * (8 - 2) * -1);
  }
  .item3 {
    animation-delay: calc(30s / 8 * (8 - 3) * -1);
  }
  .item4 {
    animation-delay: calc(30s / 8 * (8 - 4) * -1);
  }
  .item5 {
    animation-delay: calc(30s / 8 * (8 - 5) * -1);
  }
  .item6 {
    animation-delay: calc(30s / 8 * (8 - 6) * -1);
  }
  .item7 {
    animation-delay: calc(30s / 8 * (8 - 7) * -1);
  }
  .item8 {
    animation-delay: calc(30s / 8 * (8 - 8) * -1);
  }

  @media screen and (max-width: 1024px) {
    .item {
      width: 100px;
      height: 50px;
      left: max(calc(100px * 8), 100%);
    }
  }
</style>
