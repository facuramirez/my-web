---
import Experience from "../assets/svg/experience.svg";
import CodeLines from "../assets/svg/codeLines.svg";
import Cofee from "../assets/svg/cofee.svg";
---

<article
  id="bannerData"
  class="relative flex flex-row items-center justify-center"
>
  <div
    class="data w-full text-white flex flex-col lg:flex-row gap-12 [&>div]:basis-1/3 lg:gap-16 xl:gap-24 [&>div]:text-center [&>div]:flex [&>div]:flex-col [&>div]:items-center [&>div]:justify-center [&>div]:gap-2 lg:[&>div]:gap-6 [&>div>span]:text-2xl lg:[&>div>span]:text-3xl xl:[&>div>span]:text-4xl [&>div>p]:text-md lg:[&>div>p]:text-lg [&>div>span]:-translate-x-[0px] [&>div>p]:-translate-x-[0px]"
  >
    <div class="first">
      <Experience class="p-3 lg:p-5 w-[1rem] translate-x-[0px]" />
      <span class="-translate-x-[12px]"
        >+ <span id="experienceTime">0</span></span
      >
      <p>Años de experiencia</p>
    </div>
    <div class="second">
      <CodeLines class="translate-x-[1px]" />
      <span>+ <span id="lineCodes">0</span></span>
      <p>Lineas de codigo</p>
    </div>
    <div class="third">
      <Cofee class="translate-x-[5px] p-2" />
      <span>+ <span id="cupOfTea">0</span></span>
      <p>Tazas de cafe</p>
    </div>
  </div>
</article>

<style>
  #bannerData {
    width: 100%;
    height: 450px;
    z-index: 3;
    @media screen and (max-width: 1024px) {
      height: 650px;
    }
  }
  #bannerData::before {
    content: "";
    position: absolute;
    opacity: 0.1;
    width: 100%;
    height: 100%;
    background-image: url("../assets/svg/code.jpeg");
    background-attachment: fixed;
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    justify-content: center;
  }
  .data {
    z-index: 40;
    .first {
      span,
      p {
        @media screen and (max-width: 1024px) {
          transform: translateY(-0.5rem);
        }
      }
    }
    svg {
      height: 100%;
      width: 90px;
      @media screen and (max-width: 1024px) {
        width: 70px;
      }
    }
  }
</style>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const experience = document.getElementById(
    "experienceTime"
  ) as HTMLDivElement;
  const lineCodes = document.getElementById("lineCodes") as HTMLDivElement;
  const cupOfTea = document.getElementById("cupOfTea") as HTMLDivElement;

  ScrollTrigger.create({
    trigger: lineCodes,
    start: "top 80%",
    // Otros parámetros de configuración
  });

  gsap.to(experience, {
    innerText: 4,
    duration: 0.1,
    startAt: { innerText: 0 },
    scrollTrigger: {
      trigger: experience, // Elemento que activa el trigger
      start: "top bottom", // Cuando la parte superior del elemento entra en la vista (bottom de la ventana)
      // onEnter: () =>  "El elemento es visible en la ventana de vista."
      // onLeave: () =>  "El elemento salió de la vista."
    },
    onUpdate: function () {
      experience.textContent = Math.round(
        this.targets()[0].innerText
      ).toString();
    },
  });

  gsap.to(lineCodes, {
    innerText: 10684,
    duration: 3,
    startAt: { innerText: 0 },
    scrollTrigger: {
      trigger: lineCodes, // Elemento que activa el trigger
      start: "top bottom", // Cuando la parte superior del elemento entra en la vista (bottom de la ventana)
    },
    onUpdate: function () {
      // Aquí puedes actualizar el texto durante la animación
      lineCodes.textContent = Math.round(
        this.targets()[0].innerText
      ).toString();
    },
  });

  gsap.to(cupOfTea, {
    innerText: 1276,
    duration: 2,
    startAt: { innerText: 0 },
    scrollTrigger: {
      trigger: cupOfTea, // Elemento que activa el trigger
      start: "top bottom", // Cuando la parte superior del elemento entra en la vista (bottom de la ventana)
    },
    onUpdate: function () {
      // Aquí puedes actualizar el texto durante la animación
      cupOfTea.textContent = Math.round(this.targets()[0].innerText).toString();
    },
  });
</script>
